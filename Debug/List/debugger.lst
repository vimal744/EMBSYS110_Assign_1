###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       14/Apr/2016  18:00:33
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\debugger.c
#    Command line =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\debugger.c
#        -D USE_STDPERIPH_DRIVER -D STM32F401xx -lCN
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\List
#        -o
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I .\ -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Util\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\CMSIS\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\ST\StdPeripheralDrivers\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Task\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Types\
#        -On
#    List file    =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\List\debugger.lst
#    Object file  =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\Obj\debugger.o
#
###############################################################################

C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\debugger.c
      1          #include <stdint.h>
      2          #include "print.h"
      3          
      4          /*
      5           *
      6           * Part of a fault exception handler. Prints the given register values.
      7           * pc: the value of the program counter when the fault occurred.
      8           * lr: the value of the link register when the fault occurred.
      9           *
     10           */

   \                                 In section .text, align 4, keep-with-next
     11          void FaultPrint(uint32_t pc, uint32_t lr)
     12          {
   \                     FaultPrint: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     13              // Print an error message specifying the PC and LR values when the fault occurred
     14              PrintString("Error!!\n");
   \   00000006   0x480C             LDR.N    R0,??FaultPrint_0+0x4
   \   00000008   0x.... 0x....      BL       PrintString
     15              PrintString("PC = 0x"); PrintHex(pc); PrintString("\n");
   \   0000000C   0x480B             LDR.N    R0,??FaultPrint_0+0x8
   \   0000000E   0x.... 0x....      BL       PrintString
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       PrintHex
   \   00000018   0xA006             ADR.N    R0,??FaultPrint_0  ;; "\n"
   \   0000001A   0x.... 0x....      BL       PrintString
     16              PrintString("LR = 0x"); PrintHex(lr); PrintString("\n");
   \   0000001E   0x4808             LDR.N    R0,??FaultPrint_0+0xC
   \   00000020   0x.... 0x....      BL       PrintString
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x.... 0x....      BL       PrintHex
   \   0000002A   0xA002             ADR.N    R0,??FaultPrint_0  ;; "\n"
   \   0000002C   0x.... 0x....      BL       PrintString
     17          }
   \   00000030   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   00000032   0xBF00             Nop      
   \                     ??FaultPrint_0:
   \   00000034   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    
   \   00000038   0x........         DC32     ?_0
   \   0000003C   0x........         DC32     ?_1
   \   00000040   0x........         DC32     ?_3

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x72          DC8 "Error!!\012"
   \              0x72 0x6F    
   \              0x72 0x21    
   \              0x21 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x50 0x43          DC8 "PC = 0x"
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4C 0x52          DC8 "LR = 0x"
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   FaultPrint
        16   -> PrintHex
        16   -> PrintString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?_0
       8  ?_1
       2  ?_2
       8  ?_3
      68  FaultPrint

 
 30 bytes in section .rodata
 68 bytes in section .text
 
 68 bytes of CODE  memory
 30 bytes of CONST memory

Errors: none
Warnings: none
