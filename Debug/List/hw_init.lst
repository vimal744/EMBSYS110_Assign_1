###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       14/Apr/2016  18:36:47
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\hw_init.c
#    Command line =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\hw_init.c -D
#        USE_STDPERIPH_DRIVER -D STM32F401xx -lCN
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\List -o
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I .\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Util\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\CMSIS\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\ST\StdPeripheralDrivers\
#        -I C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Task\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Types\ -On
#    List file    =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\List\hw_init.lst
#    Object file  =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\Obj\hw_init.o
#
###############################################################################

C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\hw_init.c
      1          /**********************************************************
      2          FILE NAME   : hw_init.c
      3          DESCRIPTION : Init the hardware
      4          
      5          Copyright   : Dave Allegre et al
      6                      : 2015
      7          	    : All Rights Reserved
      8          **********************************************************/
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "nucleoboard.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000008   0x010A             LSLS     R2,R1,#+4
   \   0000000A   0x....             LDR.N    R3,??DataTable5  ;; 0xe000ed18
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0xF010 0x040F      ANDS     R4,R0,#0xF
   \   00000012   0x18E3             ADDS     R3,R4,R3
   \   00000014   0xF803 0x2C04      STRB     R2,[R3, #-4]
   \   00000018   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   0000001A   0x010A             LSLS     R2,R1,#+4
   \   0000001C   0x....             LDR.N    R3,??DataTable5_1  ;; 0xe000e400
   \   0000001E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000020   0x54C2             STRB     R2,[R0, R3]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000022   0xBC10             POP      {R4}
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t SysTick_Config(uint32_t)
   \                     SysTick_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x1E60             SUBS     R0,R4,#+1
   \   00000006   0xF1B0 0x7F80      CMP      R0,#+16777216
   \   0000000A   0xD301             BCC.N    ??SysTick_Config_0
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE00E             B.N      ??SysTick_Config_1
   \                     ??SysTick_Config_0: (+1)
   \   00000010   0x1E60             SUBS     R0,R4,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable5_2  ;; 0xe000e014
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0x210F             MOVS     R1,#+15
   \   00000018   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001C   0x.... 0x....      BL       NVIC_SetPriority
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable5_3  ;; 0xe000e018
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0x2007             MOVS     R0,#+7
   \   00000028   0x....             LDR.N    R1,??DataTable5_4  ;; 0xe000e010
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??SysTick_Config_1: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
     11          
     12          /* Public variables ----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private variables ---------------------------------------------------------*/
     15          
     16          /* Private prototype ---------------------------------------------------------*/
     17          void hw_system_clock(void);
     18          void hw_gpio_init(void);
     19          void hw_uart_init(void);
     20          void hw_nvic_init(void);
     21          
     22          
     23          /**********************************************************
     24          Function Name	: hw_init
     25          Description	: Calls functions to "boot up" processor
     26                          : 
     27          Parameters	:
     28          Return value	:					*/

   \                                 In section .text, align 2, keep-with-next
     29          void Hw_init(void) {
   \                     Hw_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     30            
     31            hw_system_clock();            // Clock up..
   \   00000002   0x.... 0x....      BL       hw_system_clock
     32            hw_gpio_init();               // System I/O config
   \   00000006   0x.... 0x....      BL       hw_gpio_init
     33            hw_uart_init();               // USART config
   \   0000000A   0x.... 0x....      BL       hw_uart_init
     34            
     35            /* We are not going to use the interrupt at this time
     36            hw_nvic_init();               // Interrupt config
     37            */
     38            
     39            SysTick_Config(CLOCK_HSI / 10);
   \   0000000E   0x....             LDR.N    R0,??DataTable5_5  ;; 0x186a00
   \   00000010   0x.... 0x....      BL       SysTick_Config
     40          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     41          
     42          /*******************************************************************************
     43          Function Name	: hw_system_clock
     44           * Clock fan out is not well documented, see stm32f401 reference manual, section 6.2 
     45           * Examine how HSI gets to the GPIO block (GPIO is on AHB1)
     46           * see section 6.2.6
     47           * The system can switch to the PLL to go faster, see PLLCFGR, 6.3.2
     48           * There is no need for that here, so leave SYSCLK == HSI
     49           * Leave AHB1 == SYSCLK (PPRE2 = 0)
     50          Parameters	: None
     51          Return value	: None
     52          Author          : Geoff Smith
     53          */

   \                                 In section .text, align 2, keep-with-next
     54          void hw_system_clock(void) {
     55          uint32_t reg;
     56               
     57              /* Enable used clocks, see 6.3.9 */
     58              reg = RCC->APB1ENR;
   \                     hw_system_clock: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40023840
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x0008             MOVS     R0,R1
     59              reg |= RCC_APB1ENR_PWREN;
   \   00000006   0xF050 0x5080      ORRS     R0,R0,#0x10000000
     60              RCC->APB1ENR = reg;    
   \   0000000A   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40023840
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     61              
     62              reg= RCC->AHB1ENR;
   \   0000000E   0x....             LDR.N    R1,??DataTable5_7  ;; 0x40023830
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x0008             MOVS     R0,R1
     63              reg |= RCC_AHB1ENR_GPIOAEN|RCC_AHB1ENR_GPIOBEN|RCC_AHB1ENR_GPIOCEN|RCC_AHB1ENR_GPIODEN|RCC_AHB1ENR_GPIOEEN;
   \   00000014   0xF050 0x001F      ORRS     R0,R0,#0x1F
     64              RCC->AHB1ENR = reg;
   \   00000018   0x....             LDR.N    R1,??DataTable5_7  ;; 0x40023830
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     65              
     66              reg= RCC->APB2ENR;
   \   0000001C   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40023844
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x0008             MOVS     R0,R1
     67              reg |= RCC_APB2ENR_SYSCFGEN;
   \   00000022   0xF450 0x4080      ORRS     R0,R0,#0x4000
     68              RCC->APB2ENR = reg;
   \   00000026   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40023844
   \   00000028   0x6008             STR      R0,[R1, #+0]
     69          
     70          }
   \   0000002A   0x4770             BX       LR               ;; return
     71          /*******************************************************************************
     72          Function Name	: hw_gpio_init
     73          Description	: Init the needed GPIO
     74          Parameters	: None
     75          Return value	: None
     76          Author          : Dave Allegre  */

   \                                 In section .text, align 2, keep-with-next
     77          void hw_gpio_init(void) {
   \                     hw_gpio_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     78          GPIO_InitTypeDef GPIO_InitStructure;
     79          
     80            // Enable the GPIO_PORT_LD2 peripheral clock 
     81            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     82              
     83            GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LD2;           // LED
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     84            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xF88D 0x0005      STRB     R0,[SP, #+5]
     85            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0004      STRB     R0,[SP, #+4]
     86            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0006      STRB     R0,[SP, #+6]
     87            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;  
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0007      STRB     R0,[SP, #+7]
     88            GPIO_Init(GPIO_PORT_LD2, &GPIO_InitStructure);
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x....             LDR.N    R0,??DataTable5_9  ;; 0x40020000
   \   0000002C   0x.... 0x....      BL       GPIO_Init
     89          
     90            // USART is a alternate function on the Nucleo kit
     91            GPIO_PinAFConfig(GPIO_PORT_USART, GPIO_TX_AF_SOURCE, GPIO_USART_AF);
   \   00000030   0x2207             MOVS     R2,#+7
   \   00000032   0x2102             MOVS     R1,#+2
   \   00000034   0x....             LDR.N    R0,??DataTable5_9  ;; 0x40020000
   \   00000036   0x.... 0x....      BL       GPIO_PinAFConfig
     92            GPIO_PinAFConfig(GPIO_PORT_USART, GPIO_RX_AF_SOURCE, GPIO_USART_AF);
   \   0000003A   0x2207             MOVS     R2,#+7
   \   0000003C   0x2103             MOVS     R1,#+3
   \   0000003E   0x....             LDR.N    R0,??DataTable5_9  ;; 0x40020000
   \   00000040   0x.... 0x....      BL       GPIO_PinAFConfig
     93            
     94            GPIO_InitStructure.GPIO_Pin = GPIO_PIN_TX;            // USART_TX
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x9000             STR      R0,[SP, #+0]
     95            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     96            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;  
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xF88D 0x0007      STRB     R0,[SP, #+7]
     97            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF88D 0x0006      STRB     R0,[SP, #+6]
     98            GPIO_Init(GPIO_PORT_USART, &GPIO_InitStructure);
   \   0000005A   0x4669             MOV      R1,SP
   \   0000005C   0x....             LDR.N    R0,??DataTable5_9  ;; 0x40020000
   \   0000005E   0x.... 0x....      BL       GPIO_Init
     99            
    100            GPIO_InitStructure.GPIO_Pin = GPIO_PIN_RX;            // USART_RX
   \   00000062   0x2008             MOVS     R0,#+8
   \   00000064   0x9000             STR      R0,[SP, #+0]
    101            GPIO_Init(GPIO_PORT_USART, &GPIO_InitStructure);
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x....             LDR.N    R0,??DataTable5_9  ;; 0x40020000
   \   0000006A   0x.... 0x....      BL       GPIO_Init
    102            
    103          
    104          }
   \   0000006E   0xBD07             POP      {R0-R2,PC}       ;; return
    105          /*******************************************************************************
    106          Function Name	: hw_uart_init
    107          Description	: 
    108          Parameters	: None
    109          Return value	: None
    110          Author          : Dave Allegre  */

   \                                 In section .text, align 2, keep-with-next
    111          void hw_uart_init(void) {
   \                     hw_uart_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    112          USART_InitTypeDef USART_InitStructure;
    113             
    114            RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000000A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    115           /* USARTx configuration ------------------------------------------------------*/
    116             /* USARTx configured as follows:
    117                   - BaudRate = from BAUD_RATE  
    118                   - Word Length = 8 Bits
    119                   - Two Stop Bit
    120                   - Odd parity
    121                   - Hardware flow control disabled (RTS and CTS signals)
    122                   - Receive and transmit enabled
    123             */
    124             USART_InitStructure.USART_BaudRate = BAUD_RATE;
   \   0000000E   0xF44F 0x4016      MOV      R0,#+38400
   \   00000012   0x9000             STR      R0,[SP, #+0]
    125             USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    126             USART_InitStructure.USART_StopBits = USART_StopBits_1;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    127             USART_InitStructure.USART_Parity = USART_Parity_No;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    128             USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    129             USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   0000002C   0x200C             MOVS     R0,#+12
   \   0000002E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    130           
    131             USART_Init(COMM, &USART_InitStructure);
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x....             LDR.N    R0,??DataTable5_10  ;; 0x40004400
   \   00000036   0x.... 0x....      BL       USART_Init
    132             
    133             USART_Cmd(COMM, ENABLE);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x....             LDR.N    R0,??DataTable5_10  ;; 0x40004400
   \   0000003E   0x.... 0x....      BL       USART_Cmd
    134          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
    135          /*******************************************************************************
    136          Function Name	: hw_nvic_init
    137          Description	: 
    138          Parameters	: None
    139          Return value	: None
    140          Author          : Dave Allegre  */

   \                                 In section .text, align 2, keep-with-next
    141          void hw_nvic_init(void) {
   \                     hw_nvic_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    142          NVIC_InitTypeDef NVIC_InitStructure;
    143          
    144            NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   00000002   0x2026             MOVS     R0,#+38
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
    145            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    146            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
    147            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0003      STRB     R0,[SP, #+3]
    148            NVIC_Init(&NVIC_InitStructure);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       NVIC_Init
    149            
    150          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E018         DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x00186A00         DC32     0x186a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x40004400         DC32     0x40004400
    151            
    152          
    153          
    154          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Hw_init
         8   -> SysTick_Config
         8   -> hw_gpio_init
         8   -> hw_system_clock
         8   -> hw_uart_init
       4   NVIC_SetPriority
       8   SysTick_Config
         8   -> NVIC_SetPriority
      16   hw_gpio_init
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
       8   hw_nvic_init
         8   -> NVIC_Init
       0   hw_system_clock
      24   hw_uart_init
        24   -> RCC_APB1PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      22  Hw_init
      38  NVIC_SetPriority
      48  SysTick_Config
     112  hw_gpio_init
      34  hw_nvic_init
      44  hw_system_clock
      70  hw_uart_init

 
 412 bytes in section .text
 
 412 bytes of CODE memory

Errors: none
Warnings: none
