###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       14/Apr/2016  18:36:48
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\uart.c
#    Command line =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\uart.c -D
#        USE_STDPERIPH_DRIVER -D STM32F401xx -lCN
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\List -o
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I .\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Util\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\CMSIS\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\ST\StdPeripheralDrivers\
#        -I C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Task\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Types\ -On
#    List file    =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\List\uart.lst
#    Object file  =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\Obj\uart.o
#
###############################################################################

C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\uart.c
      1          
      2          #include "nucleoboard.h"
      3          
      4          /**
      5            * @brief  Print a character on the HyperTerminal
      6            * @param  c: The character to be printed
      7            * @retval None
      8            */

   \                                 In section .text, align 4, keep-with-next
      9          void PrintByte(char c)
     10          {
   \                     PrintByte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     11            USART_SendData(COMM, c);
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x4805             LDR.N    R0,??PrintByte_0  ;; 0x40004400
   \   0000000C   0x.... 0x....      BL       USART_SendData
     12            while (USART_GetFlagStatus(COMM, USART_FLAG_TXE) == RESET)
   \                     ??PrintByte_1: (+1)
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x4803             LDR.N    R0,??PrintByte_0  ;; 0x40004400
   \   00000014   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD0F9             BEQ.N    ??PrintByte_1
     13            {
     14            }
     15          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
   \   0000001E   0xBF00             Nop      
   \                     ??PrintByte_0:
   \   00000020   0x40004400         DC32     0x40004400

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PrintByte
         8   -> USART_GetFlagStatus
         8   -> USART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  PrintByte

 
 36 bytes in section .text
 
 36 bytes of CODE memory

Errors: none
Warnings: none
