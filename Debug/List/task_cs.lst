###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       14/Apr/2016  18:17:07
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Task\task_cs.c
#    Command line =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Task\task_cs.c
#        -D USE_STDPERIPH_DRIVER -D STM32F401xx -lCN
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\List
#        -o
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I .\ -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Util\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\CMSIS\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\ST\StdPeripheralDrivers\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Task\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Types\
#        -On
#    List file    =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\List\task_cs.lst
#    Object file  =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\Obj\task_cs.o
#
###############################################################################

C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Task\task_cs.c
      1          #include "TYPS_pub.h"
      2          #include "TASK_pub.h"
      3          

   \                                 In section .text, align 2, keep-with-next
      4          TASK_cs_err_type InitializeCriticalSection(TASK_cs_type* pCS)
      5          {
   \                     InitializeCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
      6              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
      7          }
      8          

   \                                 In section .text, align 2, keep-with-next
      9          TASK_cs_err_type EnterCriticalSection(TASK_cs_type* pCS)
     10          {
   \                     EnterCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     11              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     12          }
     13          
     14          

   \                                 In section .text, align 2, keep-with-next
     15          TASK_cs_err_type LeaveCriticalSection(TASK_cs_type* pCS)
     16          {
   \                     LeaveCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     17              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     18          }
     19          

   \                                 In section .text, align 2, keep-with-next
     20          TASK_cs_err_type DeleteCriticalSection(TASK_cs_type* pCS)
     21          {
   \                     DeleteCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     22              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     23          }
     24          
     25          
     26          
     27          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DeleteCriticalSection
       0   EnterCriticalSection
       0   InitializeCriticalSection
       0   LeaveCriticalSection


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  DeleteCriticalSection
       6  EnterCriticalSection
       6  InitializeCriticalSection
       6  LeaveCriticalSection

 
 24 bytes in section .text
 
 24 bytes of CODE memory

Errors: none
Warnings: none
