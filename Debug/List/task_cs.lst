###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       14/Apr/2016  18:36:48
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Task\task_cs.c
#    Command line =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Task\task_cs.c -D
#        USE_STDPERIPH_DRIVER -D STM32F401xx -lCN
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\List -o
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I .\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Util\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\CMSIS\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\BSP\ST\StdPeripheralDrivers\
#        -I C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Task\ -I
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Types\ -On
#    List file    =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\List\task_cs.lst
#    Object file  =  
#        C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Debug\Obj\task_cs.o
#
###############################################################################

C:\Users\mehta\Documents\GitHub\EMBSYS110_Assign_1\Task\task_cs.c
      1          #include "TYPS_pub.h"
      2          #include "TASK_pub.h"
      3          
      4          #include <string.h>
      5          

   \                                 In section .text, align 2, keep-with-next
      6          TASK_cs_err_type InitializeCriticalSection(TASK_cs_type* pCS)
      7          {
   \                     InitializeCriticalSection: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
      8              TASK_cs_err_type err;
      9          
     10              err = TASK_CS_ERR_UNKNOWN;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x0005             MOVS     R5,R0
     11          
     12              if( pCS != NULL )
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD002             BEQ.N    ??InitializeCriticalSection_0
     13              {
     14                  err = TASK_CS_ERR_PARAM;
   \   0000000C   0x2006             MOVS     R0,#+6
   \   0000000E   0x0005             MOVS     R5,R0
   \   00000010   0xE011             B.N      ??InitializeCriticalSection_1
     15              }
     16              else
     17              {
     18                  if( TASK_CS_SIGNATURE == pCS->signature )
   \                     ??InitializeCriticalSection_0: (+1)
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x....             LDR.N    R1,??DataTable0  ;; 0x4352534e
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD102             BNE.N    ??InitializeCriticalSection_2
     19                  {
     20                      err = TASK_CS_ERR_ALRDY_INITED;
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x0005             MOVS     R5,R0
   \   0000001E   0xE00A             B.N      ??InitializeCriticalSection_1
     21                  }
     22                  else
     23                  {
     24                      memset( pCS, 0, sizeof( TASK_cs_type ) );
   \                     ??InitializeCriticalSection_2: (+1)
   \   00000020   0x260C             MOVS     R6,#+12
   \   00000022   0x2700             MOVS     R7,#+0
   \   00000024   0x003A             MOVS     R2,R7
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       __aeabi_memset
     25                      pCS->signature = TASK_CS_SIGNATURE;
   \   0000002E   0x....             LDR.N    R0,??DataTable0  ;; 0x4352534e
   \   00000030   0x6060             STR      R0,[R4, #+4]
     26                      err = TASK_CS_ERR_SUCCESS;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x0005             MOVS     R5,R0
     27                  }
     28              }
     29          
     30          
     31              return err;
   \                     ??InitializeCriticalSection_1: (+1)
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     32          }
     33          

   \                                 In section .text, align 2, keep-with-next
     34          TASK_cs_err_type EnterCriticalSection(TASK_cs_type* pCS)
     35          {
   \                     EnterCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     36              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     37          }
     38          
     39          

   \                                 In section .text, align 2, keep-with-next
     40          TASK_cs_err_type LeaveCriticalSection(TASK_cs_type* pCS)
     41          {
   \                     LeaveCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     42              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          TASK_cs_err_type DeleteCriticalSection(TASK_cs_type* pCS)
     46          {
   \                     DeleteCriticalSection: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     47              return TASK_CS_ERR_UNKNOWN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     48          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x4352534E         DC32     0x4352534e
     49          
     50          
     51          
     52          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DeleteCriticalSection
       0   EnterCriticalSection
      24   InitializeCriticalSection
        24   -> __aeabi_memset
       0   LeaveCriticalSection


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       6  DeleteCriticalSection
       6  EnterCriticalSection
      60  InitializeCriticalSection
       6  LeaveCriticalSection

 
 82 bytes in section .text
 
 82 bytes of CODE memory

Errors: none
Warnings: none
