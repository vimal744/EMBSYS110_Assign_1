###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       14/Apr/2016  18:00:33
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Util\print.c
#    Command line =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Util\print.c
#        -D USE_STDPERIPH_DRIVER -D STM32F401xx -lCN
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\List
#        -o
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I .\ -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Util\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\CMSIS\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\BSP\ST\StdPeripheralDrivers\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Task\
#        -I
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Types\
#        -On
#    List file    =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\List\print.lst
#    Object file  =  
#        C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Debug\Obj\print.o
#
###############################################################################

C:\Users\mehta\Desktop\STM32F401\E110\Assignment_1\uDebugger_vimalm\Util\print.c
      1          /*******************************************************************************
      2          FILE NAME   : print.c
      3          DESCRIPTION : Very lightweight print functions.
      4          
      5          HISTORY     :
      6          2007/10/01  : Mitch Ishihara
      7          2007/10/30  : Added Alan's uint32_t print
      8                      : Added Stephane's printHex
      9          2015/10/21  : David Allegre
     10                      : Adapted routines for the Nucleo kit
     11          *******************************************************************************/
     12          /* Includes ------------------------------------------------------------------*/
     13          #include "print.h"
     14          
     15          /* Private define ------------------------------------------------------------*/
     16          #define BUFFER_LENGTH   20
     17          
     18          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     19          char buffer[BUFFER_LENGTH];
   \                     buffer:
   \   00000000                      DS8 20
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void PrintHex(uint32_t u32) {
   \                     PrintHex: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
     22          uint32_t   u32Mask  = 0xF0000000;
   \   00000004   0xF05F 0x4570      MOVS     R5,#-268435456
     23          uint8_t    u32Shift = 32;
   \   00000008   0x2620             MOVS     R6,#+32
     24          uint32_t   u32Char;
     25          
     26            do {
     27              u32Shift -= 4;
   \                     ??PrintHex_0: (+1)
   \   0000000A   0x1F36             SUBS     R6,R6,#+4
     28              u32Char = (u32 & u32Mask) >> u32Shift;
   \   0000000C   0xEA15 0x0004      ANDS     R0,R5,R4
   \   00000010   0x40F0             LSRS     R0,R0,R6
   \   00000012   0x0007             MOVS     R7,R0
     29              u32Mask >>= 4;
   \   00000014   0x092D             LSRS     R5,R5,#+4
     30              if (u32Char >= 0xA) {
   \   00000016   0x2F0A             CMP      R7,#+10
   \   00000018   0xD305             BCC.N    ??PrintHex_1
     31                PrintByte('A' + (u32Char - 10));
   \   0000001A   0xF117 0x0037      ADDS     R0,R7,#+55
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       PrintByte
   \   00000024   0xE004             B.N      ??PrintHex_2
     32              } else {
     33                PrintByte('0' + u32Char);
   \                     ??PrintHex_1: (+1)
   \   00000026   0xF117 0x0030      ADDS     R0,R7,#+48
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       PrintByte
     34              }
     35            } while (u32Shift > 0);
   \                     ??PrintHex_2: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2E00             CMP      R6,#+0
   \   00000034   0xD1E9             BNE.N    ??PrintHex_0
     36          }
   \   00000036   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void Print_uint32(uint32_t u) {
   \                     Print_uint32: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     39          char *p = &buffer[BUFFER_LENGTH - 1];
   \   00000004   0x....             LDR.N    R5,??DataTable0
     40          
     41              *p = '\0';
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7028             STRB     R0,[R5, #+0]
     42              do {
     43                  p--;
   \                     ??Print_uint32_0: (+1)
   \   0000000A   0x1E6D             SUBS     R5,R5,#+1
     44                  *p = (u % 10) + '0';
   \   0000000C   0x200A             MOVS     R0,#+10
   \   0000000E   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   00000012   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000016   0x3030             ADDS     R0,R0,#+48
   \   00000018   0x7028             STRB     R0,[R5, #+0]
     45                  u /= 10;
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0xFBB4 0xF4F0      UDIV     R4,R4,R0
     46              } while (u > 0);
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD1F2             BNE.N    ??Print_uint32_0
     47          
     48              PrintString(p);
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x.... 0x....      BL       PrintString
     49          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     50          //

   \                                 In section .text, align 2, keep-with-next
     51          void PrintString(char *ptr) {
   \                     PrintString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     52          
     53            if (ptr==0 || *ptr==0) return;
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD002             BEQ.N    ??PrintString_0
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD100             BNE.N    ??PrintString_1
   \                     ??PrintString_0: (+1)
   \   0000000E   0xE011             B.N      ??PrintString_2
     54          
     55            do {
     56              if (*ptr=='\n') {
   \                     ??PrintString_1: (+1)
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x280A             CMP      R0,#+10
   \   00000014   0xD107             BNE.N    ??PrintString_3
     57                PrintByte(*ptr++);
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x.... 0x....      BL       PrintByte
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
     58                PrintByte('\r');
   \   0000001E   0x200D             MOVS     R0,#+13
   \   00000020   0x.... 0x....      BL       PrintByte
   \   00000024   0xE003             B.N      ??PrintString_4
     59              } else {
     60                PrintByte(*ptr++);
   \                     ??PrintString_3: (+1)
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x.... 0x....      BL       PrintByte
   \   0000002C   0x1C64             ADDS     R4,R4,#+1
     61              }
     62            } while (*ptr!=0);
   \                     ??PrintString_4: (+1)
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD1ED             BNE.N    ??PrintString_1
     63          }
   \                     ??PrintString_2: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     buffer+0x13

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   PrintHex
        24   -> PrintByte
       8   PrintString
         8   -> PrintByte
      16   Print_uint32
        16   -> PrintString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      56  PrintHex
      54  PrintString
      44  Print_uint32
      20  buffer

 
  20 bytes in section .bss
 158 bytes in section .text
 
 158 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
